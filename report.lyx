#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\PassOptionsToPackage{normalem}{ulem}
\usepackage{ulem}
\usepackage{listings}\usepackage{url}\usepackage{parskip}
\usepackage [numbers]{natbib}
\usepackage[english]{babel}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding latin9
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 2
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Facebook Topics Extraction System (FTES)
\end_layout

\begin_layout Author
Khoa Tran 
\family typewriter

\begin_inset Newline newline
\end_inset

khoatran@berkeley.edu
\family default

\begin_inset Newline newline
\end_inset

 INFO 256 Fall 2013
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Dealing with social network data and extracting information from them is
 increasingly becoming a major topic in Natural Language Processing and
 Data Mining.
 In recent years, Twitter datastream is used to predict stocks
\begin_inset CommandInset citation
LatexCommand cite
key "StockMarket"

\end_inset

, as well as flu outbreaks
\begin_inset CommandInset citation
LatexCommand cite
key "MITFlu"

\end_inset

, among other things.
 In this final project, Facebook feeds are explored to build a simple search
 system and to determine popular topics being discussed in real time.
\end_layout

\begin_layout Subsection
Project Goals
\end_layout

\begin_layout Itemize
To extract information related to a search query, and compare the result
 with Facebook's search
\end_layout

\begin_layout Itemize
To identify popular topics in a given facebook page
\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
Facebook search uses different metrics, including but not limited to, the
 number of views, likes, and comments.
 Based on these counts, it then decides which posts would be most relevant
 to a given search query.
 While popularity is certainly an interesting metric, oftentimes the search
 result doesn't carry the relevant information.
 For example, a sarcastic response with completely opposite information,
 which is often the case on social network, may receive many 'likes' from
 other users.
 To that end, one of the project goals is to determine how well the NLP
 approach - a bag of words model with TFIDF weighting and Cosine Distance
 Similarity - would perform compare to Facebook search.
\end_layout

\begin_layout Standard
Apart from search, there's much to learn from Facebook feeds.
 One common example would be what popular topics are being discussed.
 Twitter introduced 
\begin_inset Quotes eld
\end_inset

trendings
\begin_inset Quotes erd
\end_inset

 a few years back, which allows its users to see what everyone else around
 the world is talking about.
 Given a long list of posts, how would a user determine the popular topics
 without scrolling through every single post? The second goal of this project
 is to answer this question.
\end_layout

\begin_layout Subsection
Why Facebook?
\end_layout

\begin_layout Standard
There are certainly many interesting datasets out there, but nothing comes
 close to the excitement from working with live data that one sees everyday.
 Why was Facebook chosen over Twitter, Github, or other social networking
 sites? First, Facebook feeds have not been explored much compared to other
 social networks, mostly due to the complexity and not well-designed documentati
on of the API.
 Second, the FB API doesn't offer official support to some popular programming
 languages such as Python, Ruby, etc.
 This is mostly because Facebook Apps developers tend to prefer Javascript
 or PHP over aforementioned languages for different reasons.
 Hence, tackling this project using the unofficial Python Facebook SDK is
 a fantastic and challenging problem to crack.
\end_layout

\begin_layout Standard
Furthermore, unlike Twitter who requires a 140-character limit in every
 tweet, there is no limit to the length of a Facebook post.
 This is actually good news for the NLP approach because words are more
 often spelled out in full on Facebook than on Twitter.
\end_layout

\begin_layout Section
API Usage, Dataset, and External Dependencies
\end_layout

\begin_layout Subsection
Access Token and API Usage
\end_layout

\begin_layout Standard
To connect to Facebook and acquire the feeds data, the first step is to
 generate a Facebook Access Token
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://developers.facebook.com/tools/explorer}
\end_layout

\end_inset


\end_layout

\end_inset

.
 Most Facebook applications will have this generated on the fly whenever
 a user logins to the application, which allows it to acquire the user's
 data.
 The biggest downside of Facebook Access Token is that it expires every
 two hours, so it is very important to locally cache the data.
\end_layout

\begin_layout Standard
Facebook API offers many different services, ranging from querying data
 from individual profile to Ads and Facebook Chat integration.
 However, it is quite cumbersome to connect to Facebook the traditional
 way by sending a GET request since there are a lot of different URLs with
 different parameters to remember.
 To that end, the unofficial Facebook SDK for Python is born to make this
 process easier.
 It's suprisingly easy to retrieve a list of one's friends using just two
 lines of code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

graph = facebook.GraphAPI(ACCESS_TOKEN)
\end_layout

\begin_layout Plain Layout

friends = graph.get_connections("me", "friends")
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
get_connections
\family default
 is a very special function because it allows one to easily retrieve any
 connection between two different 
\begin_inset Quotes eld
\end_inset

Facebook objects
\begin_inset Quotes erd
\end_inset

.
 More information can be found on the Python Facebook SDK
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://facebook-python-library.docs-library.appspot.com/facebook-python/library
-manual.html}
\end_layout

\end_inset


\end_layout

\end_inset

, as well as the official Graph API documentation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{https://developers.facebook.com/docs/reference/apis/}
\end_layout

\end_inset


\end_layout

\end_inset

.
 In the next subsection, we will see how to acquire the dataset using this
 very method.
\end_layout

\begin_layout Subsection
Dataset
\end_layout

\begin_layout Standard
The corpus used in this project came from the UC Berkeley Computer Science
 Facebook group, which was last updated on Thursday, December 12, at 5pm
 PST.
 To acquire the group's feed, we use the 
\family typewriter
get_connections
\family default
 method as followed:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

graph.get_connections(id, 'feed')
\end_layout

\end_inset

, where 
\family typewriter
graph
\family default
 is the Facebook graph from Section 2.1.
 How would one find out a Facebook group ID?
\end_layout

\begin_layout Standard
It turns out that Facebook offers no easy way to achieve this.
 One option would be to click on 'View Page Source' and look for the group
 ID.
 Since the source code of a Facebook page is huge, this approach is much
 like looking for a needle in a haystack.
 In this project, I use a third-party service to get the Facebook Group
 ID
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://wallflux.com/facebook_id/}
\end_layout

\end_inset


\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Once the group ID is found, the function call above would return the data
 containing Facebook posts in JSON format.
 The data is then cleaned up using several different methods, including
 converting from Unicode to ASCII, dropping newline ('
\family typewriter

\backslash
n
\family default
') and carriage ('
\family typewriter

\backslash
r
\family default
') characters, etc.
 to make the data more processable.
\end_layout

\begin_layout Subsection
External Dependencies
\end_layout

\begin_layout Standard
One of the thing that makes Python a great language for Data Mining and
 Natural Language Processing is its rich number of powerful, yet simple,
 packages and libraries.
 Apart from the Python Facebook SDK, the non-exhaustive list below contains
 some important packages used in this project:
\end_layout

\begin_layout Standard
Connecting to Facebook:
\end_layout

\begin_layout Itemize

\family typewriter
requests
\family default
 is a powerful library for making RESTful requests.
 Born to simplify the complexity in built-in modules like 
\family typewriter
urllib
\family default
 or 
\family typewriter
urllib2
\family default
, 
\family typewriter
requests
\family default
 is quicky becoming the de facto way of making web requests in Python applicatio
ns
\end_layout

\begin_layout Itemize

\family typewriter
json
\family default
 and 
\family typewriter
simplejson
\family default
 are used to convert back and forth between JSON data and Python's dictionary,
 as well as printing multi-level nested data in a nicely indented format
\end_layout

\begin_layout Standard
Numerical Computing and Plotting:
\end_layout

\begin_layout Itemize

\family typewriter
numpy
\family default
 and 
\family typewriter
matplotlib
\family default
 are the standard way for any numerical computation and plotting in Python
\end_layout

\begin_layout Itemize

\family typewriter
networkx
\family default
, a package built on top of matplotlib, is used to visualize the connections
 in a Facebook social graph
\end_layout

\begin_layout Standard
Natural Language Processing:
\end_layout

\begin_layout Itemize

\family typewriter
nltk
\family default
 - with 12 years of experience since its first release in 2001, there's
 no deny that the Natural Language Toolkit is the best friend of any Natural
 Language researchers working with Python
\end_layout

\begin_layout Itemize

\family typewriter
pattern
\family default
 is a web mining module developed by CLiPS, the Computational Linguistics
 and Psycholinguistics Research Center.
 Beside web mining, 
\family typewriter
pattern
\family default
 comes equipped with modules for database, web search, vectorized computation,
 and graphing
\end_layout

\begin_layout Standard
Last but not least, the entire project was built inside an IPython Notebook.
 As Professor Philip Guo said, 
\begin_inset Quotes eld
\end_inset

everything related to my analysis is located in one unified place
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://www.pgbovine.net/ipython-notebook-first-impressions.htm}
\end_layout

\end_inset


\end_layout

\end_inset

, thanks to the IPython Notebook.
 This simplifies a lot of things as I don't have to maintain a separate
 presentation for the final project demonstration, and I can document every
 step along the way right on the notebook, which helps a lot when I come
 back and type up this final report.
\end_layout

\begin_layout Subsection
Viewing the Demo and Reproducing the Result
\end_layout

\begin_layout Standard
The Python code is generated using IPython Notebook's automatic code generation,
 which often includes more extraneous comments than a standard Python file.
 The best way to view the code without installing any dependency is to use
 
\family typewriter
nbviewer
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://nbviewer.ipython.org/}
\end_layout

\end_inset


\end_layout

\end_inset

, a static IPython Notebook viewer.
 The entire notebook, which includes all code, documentation, and relevant
 images, can be found at 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://bit.ly/19Fzr5p}
\end_layout

\end_inset

.
\begin_inset Foot
status open

\begin_layout Plain Layout

The unshortened link is 
\lang english

\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
url{http://nbviewer.ipython.org/github/kqdtran/FTES/blob/master/ftes.ipynb}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To reproduce the project in a development environment, a file called 
\family typewriter
requirements.txt
\family default
 is included.
 By running 
\family typewriter
pip install -r requirements.txt
\family default
, all external packages and dependencies will be installed.
 It is best to execute this command in a virtual machine or a separate 
\family typewriter
virtualenv
\family default
 environment to avoid any potential conflicts.
\end_layout

\begin_layout Standard
The project was developed in Ubuntu 12.10.
 Please do not hesitate to contact the author for any questions regarding
 the project and how to reproduce the result.
\end_layout

\begin_layout Section
Simple Search Engine
\end_layout

\begin_layout Subsection
Approach
\end_layout

\begin_layout Subsection
Algorithm
\end_layout

\begin_layout Subsection
Result
\end_layout

\begin_layout Section
Popular Topics Analysis
\end_layout

\begin_layout Subsection
Approach
\end_layout

\begin_layout Subsection
Algorithm
\end_layout

\begin_layout Subsection
Result
\end_layout

\begin_layout Section
Summary and Future Work
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "reference"
options "bibtotoc,plainnat"

\end_inset


\end_layout

\end_body
\end_document
